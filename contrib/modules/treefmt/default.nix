{
  pkgs',
}:
{
  adios,
  lib,
  self,
  ...
}:
let
  inherit (lib)
    nameValuePair
    removeSuffix
    groupBy
    mapAttrs
    head
    length
    throwIf
    ;
  inherit (adios) types;

in

{
  name = "treefmt";

  modules =
    let
      args = {
        inherit (self.defaults) pkgs;
      };
    in
    lib.mapAttrs' (n: _v: nameValuePair (removeSuffix ".nix" n) (import (./modules + "/${n}") args)) (
      builtins.readDir ./modules
    );

  checks =
    let
      inherit (self.defaults) pkgs;
      treefmt = self;
    in
    {
      # Build wrapper
      wrapper =
        pkgs.runCommand "treefmt-wrapper"
          {
            nativeBuildInputs = [
              (treefmt {
                projectRootFile = ".gitignore";
              }).package
            ];
          }
          ''
            treefmt --help
            mkdir $out
          '';
    };

  options = {
    formatters = {
      type = types.listOf (
        types.struct "treefmt-formatter" {
          name = types.string;

          treefmt = types.struct "treefmt-formatter-config" rec {
            command = types.union [
              types.string
              types.derivation # Allow setting command using writeShellScript & similar without casting to string
            ];
            includes = types.optionalAttr (types.listOf types.string);
            excludes = includes;
            options = includes;
          };
        }
      );
      default = [ ];
    };

    projectRootFile = {
      type = types.string;
    };

    package = {
      type = types.derivation;
      default = self.defaults.pkgs.treefmt;
    };

    pkgs = {
      type = types.attrs;
      default = pkgs';
    };

    excludes = {
      type = types.listOf types.string;
      default = [
        # generated lock files i.e. yarn, cargo, nix flakes
        "*.lock"
        # Files generated by patch
        "*.patch"

        # NPM
        "package-lock.json"

        # Go
        # In theory go mod tidy could format this, but it has other side-effects beyond formatting.
        "go.mod"
        "go.sum"

        # VCS
        ".gitignore"
        ".gitmodules"
        ".hgignore"
        ".svnignore"
      ];
    };
  };

  impl =
    options:
    let
      inherit (options) pkgs;

      config = {
        formatter = mapAttrs (
          name: formatters:
          let
            def = (head formatters).treefmt;
          in
          throwIf (length formatters > 1) "treefmt: name collision for formatter '${name}'" {
            inherit (def) command;
            includes = def.includes or [ ];
            options = def.options or [ ];
            excludes = def.excludes or [ ];
          }
        ) (groupBy (fmt: fmt.name) options.formatters);
        global.excludes = options.excludes;
      };

      configFile = (pkgs.formats.toml { }).generate "treefmt.toml" config;

    in
    {
      package =
        pkgs.runCommand "treefmt-adios"
          {
            meta.mainProgram = "treefmt-adios";
          }
          ''
            mkdir -p $out/bin

            cat > $out/bin/$name << EOF
            #!${pkgs.runtimeShell}
            set -euo pipefail
            unset PRJ_ROOT
            exec ${lib.getExe options.package} \
              --config-file=${configFile} \
              --tree-root-file=${options.projectRootFile} \
              "\$@"
            EOF
            chmod +x $out/bin/$name

            ln -s $out/bin/$name $out/bin/treefmt
          '';
    };
}
